const { google } = require('googleapis');
const { JWT } = require('google-auth-library');
require('dotenv').config();

const SHEET_ID = process.env.SHEET_ID;
const SHEET_NAME = process.env.SHEET_NAME || 'Requests'; // Default to 'Requests' if not set

/**
 * Authenticates with Google Sheets API using service account credentials.
 * @returns {Promise<object>} Authenticated Google Sheets API client.
 */
async function getAuthenticatedClient() {
    try {
        // Load credentials from environment variable
        const credentialsJson = process.env.GOOGLE_CREDENTIALS_JSON;
        if (!credentialsJson) {
            throw new Error('GOOGLE_CREDENTIALS_JSON environment variable is not set.');
        }
        if (!SHEET_ID) {
            throw new Error('SHEET_ID environment variable is not set.');
        }

        const credentials = JSON.parse(credentialsJson); // Parse the JSON string from env var

        const client = new JWT({
            email: credentials.client_email,
            key: credentials.private_key,
            scopes: ['https://www.googleapis.com/auth/spreadsheets'],
        });

        await client.authorize(); // Authorize the client
        const sheets = google.sheets({ version: 'v4', auth: client });
        return sheets;
    } catch (error) {
        console.error('Error loading credentials or authorizing client:', error);
        throw new Error('Failed to initialize Google Sheets client.');
    }
}

/**
 * Appends a new fortune request row to the Google Sheet.
 * @param {string} userId - The LINE user ID.
 * @param {string} name - The user's name.
 * @param {string} birth - The user's birth date.
 * @param {string} theme - The selected fortune theme.
 * @param {string} gptDraft - The draft text generated by GPT.
 * @returns {Promise<object>} The result from the Sheets API append call.
 */
async function appendFortuneRequest(userId, name, birth, theme, gptDraft) {
    try {
        const sheets = await getAuthenticatedClient();
        const timestamp = new Date().toISOString();
        const values = [
            [
                timestamp,
                userId,
                name,
                birth,
                theme,
                gptDraft,
                '未検閲', // Initial status
                '',      // editedText (initially empty)
                ''       // sentAt (initially empty)
            ]
        ];

        const resource = {
            values,
        };

        const range = `${SHEET_NAME}!A:I`; // Specify the range to append to

        console.log(`Appending to Sheet ID: ${SHEET_ID}, Range: ${range}`);

        const result = await sheets.spreadsheets.values.append({
            spreadsheetId: SHEET_ID,
            range: range,
            valueInputOption: 'USER_ENTERED', // Interpret dates, numbers etc. as entered
            resource: resource,
        });

        console.log('Successfully appended data to Google Sheet:', result.data.updates.updatedRange);
        return result;
    } catch (error) {
        console.error('Error appending data to Google Sheet:', error.message);
        if (error.response && error.response.data) {
            console.error('Google API Error Details:', error.response.data.error);
        }
        // Re-throw the error to be handled by the caller
        throw new Error(`Failed to append data to sheet: ${error.message}`);
    }
}

module.exports = {
    appendFortuneRequest
};
